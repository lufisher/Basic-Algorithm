//二分查找需要序列是已经有序的，这里假定是升序。其时间复杂度是O(log2n)
//解法一：非递归写法
int BinSearch(int *list, int n, int key) {//在list数组的0-n-1中，查找key，返回下标
	int low = 0, high = n - 1, mid;
	while (low <= high) {
		if (list[low] == key)
			return low;
		if (list[high] == key)
			return high;
		mid = low + (high - low) / 2;//一定要这样写，不能写mid=(low+high)/2。因为low+high可能会产生溢出
		if (list[mid] == key)
			return mid;
		if (list[mid] < key)
			low = mid + 1;
		else
			high = mid - 1;
	}
	if (low > high)
		return -1;//查找区间没有结果，查找失败
};
//解法二：递归写法
int BinSearch(int *list, int start, int end, int key) {//在list数组的0-n-1中，查找key，返回下标
	int mid;
	if (start > end)
		return -1;
	if (list[start] == key)
		return start;
	if (list[end] == key)
		return end;
	mid = start + (end - start) / 2;
	if (list[mid] == key)
		return mid;
	if (list[mid] > key)
		return BinSearch(list, start, mid, key);
	if (list[mid] < key)
		return BinSearch(list, mid, end, key);

};
